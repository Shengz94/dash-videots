{"version":3,"sources":["../../../../../src/streaming/models/CmcdModel.js"],"names":["CMCD_REQUEST_FIELD_NAME","CMCD_VERSION","OBJECT_TYPES","MANIFEST","AUDIO","VIDEO","INIT","CAPTION","ISOBMFF_TEXT_TRACK","ENCRYPTION_KEY","OTHER","STREAMING_FORMATS","DASH","MSS","STREAM_TYPES","VOD","LIVE","RTP_SAFETY_FACTOR","CmcdModel","logger","dashManifestModel","instance","internalData","abrController","dashMetrics","playbackController","streamProcessors","_isStartup","_bufferLevelStarved","_initialMediaRequestsDone","context","eventBus","getInstance","settings","setup","getLogger","_resetInitialSettings","initialize","on","MediaPlayerEvents","PLAYBACK_RATE_CHANGED","_onPlaybackRateChanged","MANIFEST_LOADED","_onManifestLoaded","BUFFER_LEVEL_STATE_CHANGED","_onBufferLevelStateChanged","PLAYBACK_SEEKED","_onPlaybackSeeked","PERIOD_SWITCH_COMPLETED","_onPeriodSwitchComplete","setConfig","config","pr","nor","st","sf","sid","Utils","generateUuid","cid","_updateStreamProcessors","streamController","getStreamController","getActiveStream","activeStream","getProcessors","getQueryParameter","request","get","streaming","cmcd","enabled","cmcdData","_getCmcdData","finalPayloadString","_buildFinalString","trigger","MetricsReportingEvents","CMCD_DATA_GENERATED","url","mediaType","cmcdString","key","value","e","type","HTTPRequest","MPD_TYPE","_getCmcdDataForMpd","MEDIA_SEGMENT_TYPE","_initForMediaType","_getCmcdDataForMediaSegment","INIT_SEGMENT_TYPE","_getCmcdDataForInitSegment","OTHER_TYPE","XLINK_EXPANSION_TYPE","_getCmcdDataForOther","LICENSE","_getCmcdDataForLicense","data","_getGenericCmcdData","ot","encodedBitrate","_getBitrateByRequest","d","_getObjectDurationByRequest","mtp","_getMeasuredThroughputByType","dl","_getDeadlineByType","bl","_getBufferLevelByType","tb","_getTopBitrateByType","nextRequest","_probeNextRequest","Constants","FRAGMENTED_TEXT","mediaInfo","mimeType","rtp","_calculateRtp","URL","pathname","range","nrr","br","isNaN","bs","su","hasOwnProperty","v","quality","bitrateList","parseInt","bandwidth","info","getTopBitrateInfoFor","Math","round","bitrate","duration","getThroughputHistory","getSafeAverageThroughput","playbackRate","bufferLevel","getCurrentBufferLevel","isDynamic","getIsDynamic","protocol","state","BUFFER_EMPTY","keys","Object","sort","a","b","localeCompare","length","reduce","acc","index","string","replace","streamProcessor","getType","probeNextRequest","getPlaybackRate","currentBufferLevel","segmentSize","timeToLoad","minBandwidth","rtpSafetyFactor","maxBandwidth","reset","off","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"CmcdModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../../core/EventBus';\nimport MediaPlayerEvents from '../MediaPlayerEvents';\nimport MetricsReportingEvents from '../metrics/MetricsReportingEvents';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport Settings from '../../core/Settings';\nimport Constants from '../../streaming/constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DashManifestModel from '../../dash/models/DashManifestModel';\nimport Utils from '../../core/Utils';\n\nconst CMCD_REQUEST_FIELD_NAME = 'CMCD';\nconst CMCD_VERSION = 1;\nconst OBJECT_TYPES = {\n    MANIFEST: 'm',\n    AUDIO: 'a',\n    VIDEO: 'v',\n    INIT: 'i',\n    CAPTION: 'c',\n    ISOBMFF_TEXT_TRACK: 'tt',\n    ENCRYPTION_KEY: 'k',\n    OTHER: 'o'\n};\nconst STREAMING_FORMATS = {\n    DASH: 'd',\n    MSS: 's'\n};\nconst STREAM_TYPES = {\n    VOD: 'v',\n    LIVE: 'l'\n};\nconst RTP_SAFETY_FACTOR = 5;\n\nfunction CmcdModel() {\n\n    let logger,\n        dashManifestModel,\n        instance,\n        internalData,\n        abrController,\n        dashMetrics,\n        playbackController,\n        streamProcessors,\n        _isStartup,\n        _bufferLevelStarved,\n        _initialMediaRequestsDone;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    let settings = Settings(context).getInstance();\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        dashManifestModel = DashManifestModel(context).getInstance();\n\n        _resetInitialSettings();\n    }\n\n    function initialize() {\n        eventBus.on(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\n        eventBus.on(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, instance);\n        eventBus.on(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n        eventBus.on(MediaPlayerEvents.PERIOD_SWITCH_COMPLETED, _onPeriodSwitchComplete, instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n    }\n\n    function _resetInitialSettings() {\n        internalData = {\n            pr: 1,\n            nor: null,\n            st: null,\n            sf: null,\n            sid: `${Utils.generateUuid()}`,\n            cid: null\n        };\n        _bufferLevelStarved = {};\n        _isStartup = {};\n        _initialMediaRequestsDone = {};\n        _updateStreamProcessors();\n    }\n\n    function _onPeriodSwitchComplete() {\n        _updateStreamProcessors();\n    }\n\n    function _updateStreamProcessors() {\n        if (!playbackController) return;\n        const streamController = playbackController.getStreamController();\n        if (!streamController) return;\n        if (typeof streamController.getActiveStream !== 'function') return;\n        const activeStream = streamController.getActiveStream();\n        if (!activeStream) return;\n        streamProcessors = activeStream.getProcessors();\n    }\n\n    function getQueryParameter(request) {\n        try {\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n                const cmcdData = _getCmcdData(request);\n                const finalPayloadString = _buildFinalString(cmcdData);\n\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\n                    url: request.url,\n                    mediaType: request.mediaType,\n                    cmcdData,\n                    cmcdString: finalPayloadString\n                });\n                return {\n                    key: CMCD_REQUEST_FIELD_NAME,\n                    value: finalPayloadString\n                };\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getCmcdData(request) {\n        try {\n            let cmcdData = null;\n\n            if (request.type === HTTPRequest.MPD_TYPE) {\n                return _getCmcdDataForMpd(request);\n            } else if (request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n                _initForMediaType(request.mediaType);\n                return _getCmcdDataForMediaSegment(request);\n            } else if (request.type === HTTPRequest.INIT_SEGMENT_TYPE) {\n                return _getCmcdDataForInitSegment(request);\n            } else if (request.type === HTTPRequest.OTHER_TYPE || request.type === HTTPRequest.XLINK_EXPANSION_TYPE) {\n                return _getCmcdDataForOther(request);\n            } else if (request.type === HTTPRequest.LICENSE) {\n                return _getCmcdDataForLicense(request);\n            }\n\n            return cmcdData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getCmcdDataForLicense(request) {\n        const data = _getGenericCmcdData(request);\n\n        data.ot = OBJECT_TYPES.ENCRYPTION_KEY;\n\n        return data;\n    }\n\n    function _getCmcdDataForMpd() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.MANIFEST}`;\n\n        return data;\n    }\n\n    function _getCmcdDataForMediaSegment(request) {\n        const data = _getGenericCmcdData();\n        const encodedBitrate = _getBitrateByRequest(request);\n        const d = _getObjectDurationByRequest(request);\n        const mtp = _getMeasuredThroughputByType(request.mediaType);\n        const dl = _getDeadlineByType(request.mediaType);\n        const bl = _getBufferLevelByType(request.mediaType);\n        const tb = _getTopBitrateByType(request.mediaType);\n        const pr = internalData.pr;\n\n        const nextRequest = _probeNextRequest(request.mediaType);\n\n        let ot;\n        if (request.mediaType === Constants.VIDEO) ot = OBJECT_TYPES.VIDEO;\n        if (request.mediaType === Constants.AUDIO) ot = OBJECT_TYPES.AUDIO;\n        if (request.mediaType === Constants.FRAGMENTED_TEXT) {\n            if (request.mediaInfo.mimeType === 'application/mp4') {\n                ot = OBJECT_TYPES.ISOBMFF_TEXT_TRACK;\n            } else {\n                ot = OBJECT_TYPES.CAPTION;\n            }\n        }\n\n        let rtp = settings.get().streaming.cmcd.rtp;\n        if (!rtp) {\n            rtp = _calculateRtp(request);\n        }\n        data.rtp = rtp;\n\n        if (nextRequest) {\n            if (request.url !== nextRequest.url) {\n                let url = new URL(nextRequest.url);\n                data.nor = url.pathname;\n            } else if (nextRequest.range) {\n                data.nrr = nextRequest.range;\n            }\n        }\n\n        if (encodedBitrate) {\n            data.br = encodedBitrate;\n        }\n\n        if (ot) {\n            data.ot = ot;\n        }\n\n        if (!isNaN(d)) {\n            data.d = d;\n        }\n\n        if (!isNaN(mtp)) {\n            data.mtp = mtp;\n        }\n\n        if (!isNaN(dl)) {\n            data.dl = dl;\n        }\n\n        if (!isNaN(bl)) {\n            data.bl = bl;\n        }\n\n        if (!isNaN(tb)) {\n            data.tb = tb;\n        }\n\n        if (!isNaN(pr) && pr !== 1) {\n            data.pr = pr;\n        }\n\n        if (_bufferLevelStarved[request.mediaType]) {\n            data.bs = true;\n            _bufferLevelStarved[request.mediaType] = false;\n        }\n\n        if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\n            data.su = true;\n            _isStartup[request.mediaType] = false;\n            _initialMediaRequestsDone[request.mediaType] = true;\n        }\n\n        return data;\n    }\n\n    function _initForMediaType(mediaType) {\n\n        if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\n            _initialMediaRequestsDone[mediaType] = false;\n        }\n\n        if (!_isStartup.hasOwnProperty(mediaType)) {\n            _isStartup[mediaType] = false;\n        }\n\n        if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\n            _bufferLevelStarved[mediaType] = false;\n        }\n    }\n\n    function _getCmcdDataForInitSegment() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.INIT}`;\n        data.su = true;\n\n        return data;\n    }\n\n    function _getCmcdDataForOther() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.OTHER}`;\n\n        return data;\n    }\n\n\n    function _getGenericCmcdData() {\n        const data = {};\n\n        let cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\n\n        data.v = CMCD_VERSION;\n        data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\n\n        data.sid = `${data.sid}`;\n\n        if (cid) {\n            data.cid = `${cid}`;\n        }\n\n        if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\n            data.pr = internalData.pr;\n        }\n\n        if (internalData.st) {\n            data.st = internalData.st;\n        }\n\n        if (internalData.sf) {\n            data.sf = internalData.sf;\n        }\n\n        return data;\n    }\n\n    function _getBitrateByRequest(request) {\n        try {\n            const quality = request.quality;\n            const bitrateList = request.mediaInfo.bitrateList;\n\n            return parseInt(bitrateList[quality].bandwidth / 1000);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getTopBitrateByType(mediaType) {\n        try {\n            const info = abrController.getTopBitrateInfoFor(mediaType);\n            return Math.round(info.bitrate / 1000);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getObjectDurationByRequest(request) {\n        try {\n            return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getMeasuredThroughputByType(mediaType) {\n        try {\n            return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getDeadlineByType(mediaType) {\n        try {\n            const playbackRate = internalData.pr;\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n            if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\n                return parseInt((bufferLevel / playbackRate) * 10) * 100;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getBufferLevelByType(mediaType) {\n        try {\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n            if (!isNaN(bufferLevel)) {\n                return parseInt(bufferLevel * 10) * 100;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _onPlaybackRateChanged(data) {\n        try {\n            internalData.pr = data.playbackRate;\n        } catch (e) {\n\n        }\n    }\n\n    function _onManifestLoaded(data) {\n        try {\n            const isDynamic = dashManifestModel.getIsDynamic(data.data);\n            const st = isDynamic ? `${STREAM_TYPES.LIVE}` : `${STREAM_TYPES.VOD}`;\n            const sf = data.protocol && data.protocol === 'MSS' ? `${STREAMING_FORMATS.MSS}` : `${STREAMING_FORMATS.DASH}`;\n\n            internalData.st = `${st}`;\n            internalData.sf = `${sf}`;\n        } catch (e) {\n        }\n    }\n\n    function _onBufferLevelStateChanged(data) {\n        try {\n            if (data.state && data.mediaType) {\n                if (data.state === MediaPlayerEvents.BUFFER_EMPTY) {\n\n                    if (!_bufferLevelStarved[data.mediaType]) {\n                        _bufferLevelStarved[data.mediaType] = true;\n                    }\n                    if (!_isStartup[data.mediaType]) {\n                        _isStartup[data.mediaType] = true;\n                    }\n                }\n            }\n        } catch (e) {\n\n        }\n    }\n\n    function _onPlaybackSeeked() {\n        for (let key in _bufferLevelStarved) {\n            if (_bufferLevelStarved.hasOwnProperty(key)) {\n                _bufferLevelStarved[key] = true;\n            }\n        }\n\n        for (let key in _isStartup) {\n            if (_isStartup.hasOwnProperty(key)) {\n                _isStartup[key] = true;\n            }\n        }\n    }\n\n    function _buildFinalString(cmcdData) {\n        try {\n            if (!cmcdData) {\n                return null;\n            }\n            const keys = Object.keys(cmcdData).sort((a, b) => a.localeCompare(b));\n            const length = keys.length;\n\n            let cmcdString = keys.reduce((acc, key, index) => {\n                if (key === 'v' && cmcdData[key] === 1) return acc; // Version key should only be reported if it is != 1\n                if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\n                    let string = cmcdData[key].replace(/\"/g, '\\\"');\n                    acc += `${key}=\"${string}\"`;\n                } else {\n                    acc += `${key}=${cmcdData[key]}`;\n                }\n                if (index < length - 1) {\n                    acc += ',';\n                }\n\n                return acc;\n            }, '');\n\n            cmcdString = cmcdString.replace(/=true/g, '');\n\n            return cmcdString;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _probeNextRequest(mediaType) {\n        if (!streamProcessors || streamProcessors.length === 0) return;\n        for (let streamProcessor of streamProcessors) {\n            if (streamProcessor.getType() === mediaType) {\n                return streamProcessor.probeNextRequest();\n            }\n        }\n    }\n\n    function _calculateRtp(request) {\n        // Get the values we need\n        let playbackRate = playbackController.getPlaybackRate();\n        if (!playbackRate) playbackRate = 1;\n        let { quality, mediaType, mediaInfo, duration } = request;\n        let currentBufferLevel = _getBufferLevelByType(mediaType);\n        if (currentBufferLevel === 0) currentBufferLevel = 500;\n        let bitrate = mediaInfo.bitrateList[quality].bandwidth;\n\n        // Calculate RTP\n        let segmentSize = (bitrate * duration) / 1000; // Calculate file size in kilobits\n        let timeToLoad = (currentBufferLevel / playbackRate) / 1000; // Calculate time available to load file in seconds\n        let minBandwidth = segmentSize / timeToLoad; // Calculate the exact bandwidth required\n        let rtpSafetyFactor = settings.get().streaming.cmcd.rtpSafetyFactor && !isNaN(settings.get().streaming.cmcd.rtpSafetyFactor) ? settings.get().streaming.cmcd.rtpSafetyFactor : RTP_SAFETY_FACTOR;\n        let maxBandwidth = minBandwidth * rtpSafetyFactor; // Include a safety buffer\n\n        let rtp = (parseInt(maxBandwidth / 100) + 1) * 100; // Round to the next multiple of 100\n\n        return rtp;\n    }\n\n    function reset() {\n        eventBus.off(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\n        eventBus.off(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, this);\n        eventBus.off(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n\n        _resetInitialSettings();\n    }\n\n    instance = {\n        getQueryParameter,\n        setConfig,\n        reset,\n        initialize\n    };\n\n    setup();\n\n    return instance;\n}\n\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\nexport default FactoryMaker.getSingletonFactory(CmcdModel);\n"]}